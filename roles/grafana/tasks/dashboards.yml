---
- become: false
  delegate_to: localhost
  run_once: true
  block:
    - name: Create local grafana dashboard directory
      tempfile:
        state: directory
        suffix: dashboards
      register: _tmp_dashboards
      changed_when: false
      check_mode: false

   # - name: download grafana dashboard from grafana.net to local directory
   #   command: >
   #     curl --fail --compressed
   #     {{ repo_url }}/dashboards/{{ item.dashboard_id }}/{{ item.revision_id }}/{{ item.name }}
   #     -o {{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json
   #   args:
   #     creates: "{{ _tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
   #     warn: false
   #   register: _download_dashboards
   #   until: _download_dashboards is succeeded
   #   retries: 5
   #   delay: 2
   #   with_items: "{{ grafana_dashboards }}"
   #   when: grafana_dashboards | length > 0
   #   changed_when: false
   #   check_mode: false
   #   tags:
   #     - skip_ansible_lint

    - name: copy grafana dashboard
      copy:
        src: "dashboards/{{ item.name }}_rev{{ item.revision_id}}.json"
        dest: "{{ _tmp_dashboards.path }}/{{ item.name }}_rev{{ item.revision_id }}.json"
      with_items: 
      - "{{ grafana_dashboards }}"

    - name: Set the correct data source name in the dashboard
      replace:
        dest: "{{ _tmp_dashboards.path }}/{{ item.name }}_rev{{ item.revision_id}}.json"
        regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
        replace: '"{{ item.datasource }}"'
      changed_when: false
      with_items: "{{ grafana_dashboards }}"
      when: grafana_dashboards | length > 0

- name: Import grafana dashboards through API
  uri:
    url: "{{ grafana_api_url }}/api/dashboards/db"
    user: "{{ grafana_security.admin_user }}"
    password: "{{ grafana_security.admin_password }}"
    force_basic_auth: true
    method: POST
    status_code: 200
    body_format: json
    body: >
      {
        "dashboard": {{ lookup("file", item) }},
        "overwrite": true,
        "message": "Updated by ansible"
      }
  no_log: false
  with_fileglob:
    - "{{ _tmp_dashboards.path }}/*"
  when: not grafana_use_provisioning

# TODO: uncomment this when ansible 2.7 will be min supported version
# - name: import grafana dashboards
#   grafana_dashboard:
#     grafana_url: "{{ grafana_api_url }}"
#     grafana_user: "{{ grafana_security.admin_user }}"
#     grafana_password: "{{ grafana_security.admin_password }}"
#     path: "/tmp/dashboards/{{ item }}"
#     message: Updated by ansible
#     state: present
#     overwrite: true
#   no_log: true
#   with_fileglob:
#     - "/tmp/dashboards/*"

- when: grafana_use_provisioning
  block:
    - name: Create/Update dashboards file (provisioning)
      become: true
      copy:
        dest: "{{ grafana_conf_dir }}/provisioning/dashboards/ansible.yml"
        content: |
          apiVersion: 1
          providers:
           - name: 'default'
             orgId: 1
             folder: ''
             type: file
             options:
               path: "{{ grafana_data_dir }}/dashboards"
        backup: false
        owner: "{{ grafana_user }}"
        group: "{{ grafana_user }}"
        mode: 0640
      notify: restart grafana

    - name: Register previously copied dashboards
      find:
        paths: "{{ grafana_data_dir }}/dashboards"
        hidden: true
        patterns:
          - "*.json"
      register: _dashboards_present
      when: grafana_provisioning_synced

    - name: Import grafana dashboards
      become: true
      copy:
        src: "{{ item }}"
        dest: "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"
      with_fileglob:
        - "{{ _tmp_dashboards.path }}/*"
      register: _dashboards_copied
      notify: "provisioned dashboards changed"

    - name: Get dashboard lists
      set_fact:
        _dashboards_present_list: "{{ _dashboards_present | json_query('files[*].path') | default([]) }}"
        _dashboards_copied_list: "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"
      when: grafana_provisioning_synced

    - name: Remove dashbards not present on deployer machine (synchronize)
      become: true
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ _dashboards_present_list | difference( _dashboards_copied_list ) }}"
      when: grafana_provisioning_synced
