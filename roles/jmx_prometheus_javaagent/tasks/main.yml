---

#- name: JMX_EXPORTER | Ensure skeleton paths
#  file:
#    dest: "{{ item }}"
#    state: directory
#  with_items:
#    - "{{ jmx_prometheus_javaagent_lib_dir }}"

#- name: JMX_EXPORTER | Download binary
#  get_url:
#    url: "{{ repo_url }}/jmx_prometheus_javaagent/jmx_prometheus_javaagent-{{ jmx_prometheus_javaagent_version }}.jar"
#    dest: /tmp

#- name: JMX_EXPORTER | Copy binary
#  copy:
#    src: "/tmp/jmx_prometheus_javaagent-{{ jmx_prometheus_javaagent_version }}.jar"
#    dest: "{{ jmx_prometheus_javaagent_lib_dir }}/jmx_prometheus_javaagent-{{ jmx_prometheus_javaagent_version }}.jar"
#    remote_src: true
#    mode: 0755


#- debug:
#    msg: "tmp directory: {{ item.0.port }}  On host {{ item.1 }}"
#  no_log: false
#  with_subelements:
#  - "{{ jmx_configirations }}"
#  - groups

### Put the section inside the block 
- name: Get env properties
  ambari_configs:
    ambari_url: "{{ ambari_url }}"
    username: "{{ ambari_user }}"
    password: "{{ ambari_password }}"
    operation: get
    type: "{{ item.type }}"
  register: !unsafe serviceEnv
  with_items:
  - "{{ jmx_configirations }}"
  #delegate_to: localhost
  #become: false
  run_once: true
  no_log: true

- become: false
  delegate_to: localhost
  run_once: true
  no_log: true
  block:
    - name: Create local tmp directory
      tempfile:
        state: directory
      register: _tmp_env
      changed_when: false
      check_mode: false

    - debug:
        msg: "tmp directory: {{ _tmp_env }}"
      no_log: false

    - name: Copy env properties into a local file
      copy:
        dest: "/{{ _tmp_env.path }}/{{ item.item.service }}_opts.sh"
        force: yes
        content: |
          "{{ item.config[0].content }}"
      with_items:
      - "{{ serviceEnv.results }}"

    - name: Update env properties with jmx configuration
      blockinfile:
        dest: /{{ _tmp_env.path }}/{{ item.item.service }}_opts.sh
        create: yes
        state: "{{ jmx_prometheus_javaagent_state }}"
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.item.component }}"
        block: |
          if [[ ${{ item.item.opts }} != *"javaagent"* ]]; 
          then
              export {{ item.item.opts }}="${{ item.item.opts }} -javaagent:{{ jmx_prometheus_javaagent_lib_dir }}/jmx_prometheus_javaagent-{{ jmx_prometheus_javaagent_version }}.jar={{ item.item.port }}:{{ jmx_prometheus_javaagent_lib_dir }}/{{ item.item.service }}.yml"
          fi
      with_items:
      - "{{ serviceEnv.results }}"

### Put the section inside the block 
- name: Update env properties
  ambari_configs:
    ambari_url: "{{ ambari_url }}"
    username: "{{ ambari_user }}"
    password: "{{ ambari_password }}"
    operation: set
    type: "{{ item.type }}"
    values:
      content: "{{ lookup('file', '/{{ _tmp_env.path }}/'+item.item.service + '_opts.sh') }}"
  when: item.config[0].content.find('.jar='+item.item.port) == -1 or item.item.state == 'absent'
  with_items:
  - "{{ serviceEnv.results }}"
  #delegate_to: localhost
  #become: false
  run_once: true
  no_log: true
